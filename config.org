#+TITLE: Emacs Configuration
#+AUTHOR: Shantanu Bhardwaj

I have been using Emacs since 2000 and i have declared Emacs Bankruptcy
many times. It  has always been a learning experience. Mostly it works best
when I stick with it.

* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Shantanu Bhardwaj"
      user-mail-address "shan@addvalsolutions.com")
#+end_src

* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq max-lisp-eval-depth 10000)
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
;; (menu-bar-mode -1)
(setq initial-major-mode 'fundamental-mode)
(recentf-mode 1)
(save-place-mode 1)
(global-auto-revert-mode 1)
#+end_src

* System Detection
#+begin_src emacs-lisp
(defconst sys/win32p
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst sys/linuxp
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst sys/macp
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defconst sys/mac-x-p
  (and (display-graphic-p) sys/macp)
  "Are we running under X on a Mac system?")

(defconst sys/linux-x-p
  (and (display-graphic-p) sys/linuxp)
  "Are we running under X on a GNU/Linux system?")

(defconst emacs/>=25p
  (>= emacs-major-version 25)
  "Emacs is 25 or above.")

(defconst emacs/>=26p
  (>= emacs-major-version 26)
  "Emacs is 26 or above.")

(defconst emacs/>=27p
  (>= emacs-major-version 27)
  "Emacs is 27 or above.")

#+end_src

* Custom functions
#+begin_src emacs-lisp
(defun align-values (start end)
  "Vertically aligns region based on lengths of the first value of each line.
Example output:

        foo        bar
        foofoo     bar
        foofoofoo  bar"
  (interactive "r")
  (align-regexp start end
                "\\([a-z_]+: \\)"
                -1 1 nil))
#+end_src

#+begin_src emacs-lisp
(defun fontify-frame (frame)
  (interactive)
  (if sys/macp
      (progn
        (if (> (x-display-pixel-width) 4000)
            (set-frame-parameter frame 'font "Monaco 14") ;; 5k Display
          (set-frame-parameter frame 'font "Monaco 12")))))

;; Fontify current frame
;; (fontify-frame nil)

;; Fontify any future frames
;; (push 'fontify-frame after-make-frame-functions)
(defun open-init-file ()
  "Open this very file."
  (interactive)
  (find-file "~/.emacs.d/config.org"))

(bind-key "C-x e" #'open-init-file)

#+end_src
* Theme

** Doom theme

#+BEGIN_SRC emacs-lisp
;; (use-package doom-themes
;;   :straight t
;;   :config
;;   (doom-themes-visual-bell-config)
;;   (doom-themes-org-config)
;;   ;; (load-theme 'doom-ir-black t)
;;   )

;; (use-package modus-themes
;;   :straight t)
(load-theme 'modus-vivendi)


;; (use-package doom-modeline
;;   :straight t
;;   :hook (after-init . doom-modeline-mode)
;;   :config
;;   (setq doom-modeline-buffer-file-name-style 'truncate-all)
;;   ;; (setq doom-modeline-icon t)
;;   ;; (setq doom-modeline-major-mode-icon t)
;;   (setq doom-modeline-checker-simple-format nil)
;;   ;; (set-face-attribute 'mode-line nil :height 0.9)
;;   ;; (set-face-attribute 'mode-line-inactive nil :height 0.9)
;;   (setq doom-modeline-height 12)
;;   )

#+END_SRC
** Convenient theme functions

#+begin_src emacs-lisp
(defun reset-modeline()
  "Reset the modeline to 12pt font"
  (interactive)
  (set-face-attribute 'mode-line nil :height 100)
  (set-face-attribute 'mode-line-inactive nil :height 100)
  (setq doom-modeline-height 12)
  (set-face-attribute 'line-number nil :font "Monaco-10")
  (set-face-attribute 'line-number-current-line nil :font "Monaco-10")
  )

(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)
    ;; (reset-modeline)
    ))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "s-<f12>" 'switch-theme)
(bind-key "s-<f11>" 'disable-active-themes)
#+end_src

* Font

[[http://adobe-fonts.github.io/source-code-pro/][Source Code Pro]] is a nice monospaced font.

Note: To view all fonts that are available to use, run the following:

#+BEGIN_SRC emacs-lisp :tangle no
(font-family-list)
#+END_SRC

Display emojis. Source of system-specific fonts is in [[https://github.com/syohex/emacs-ac-emoji][the README for
the emacs-ac-emoji package.]]

#+BEGIN_SRC emacs-lisp
(let ((font (if (= emacs-major-version 25)
                "Symbola"
              (cond ((string-equal system-type "darwin")    "Apple Color Emoji")
                    ((string-equal system-type "gnu/linux") "Symbola")))))
  (set-fontset-font t 'unicode font nil 'prepend))
#+END_SRC

And here's how we tell Emacs to use the font we want to use.

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist
             ;; '(font . "-*-Operator Mono-medium-normal-normal-*-14-*-*-*-m-0-iso10646-1")
             ;; '(font . "Monaco for Powerline-12")
             '(font . "Iosevka Comfy 13")
             ;; '(font . "Monaco-12")
             )

#+end_src

** Enable Ligatures
#+begin_src emacs-lisp
(if (fboundp 'mac-auto-operator-composition-mode)
    (mac-auto-operator-composition-mode))

#+end_src

** Custom Mode faces
*** Echo Area
#+begin_src emacs-lisp
;; (with-current-buffer " *Echo Area 0*" (face-remap-add-relative 'default '(:family "Monaco" :height 110)))
#+end_src

*** Term Faces
#+begin_src emacs-lisp
;; Use monospaced font faces in current buffer
(defun my-term-mode-face ()
  "Sets a fixed width (monospace) font in current buffer"
  (interactive)
  (setq buffer-face-mode-face '(:family "Monaco" :height 100))
  (buffer-face-mode))

#+end_src
* Sane defaults

Let's start with some sane defaults, shall we?

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+begin_src emacs-lisp
;; These functions are useful. Activate them.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
(setq-default indent-tabs-mode nil)

;; Turn off the blinking cursor
(blink-cursor-mode -1)

(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)

;; Don't count two spaces after a period as the end of a sentence.
;; Just one space is needed.
(setq sentence-end-double-space nil)

;; delete the region when typing, just like as we expect nowadays.
(delete-selection-mode t)

(show-paren-mode t)

(column-number-mode t)

;; (global-visual-line-mode -1)
(remove-hook 'text-mode-hook #'turn-on-auto-fill)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
(diminish 'visual-line-mode)

(setq uniquify-buffer-name-style 'forward)

;; -i gets alias definitions from .bash_profile
(setq shell-command-switch "-ic")

;; Don't beep at me
(setq visible-bell nil)

;; highlight current line everywhere
(global-hl-line-mode 1)

(global-unset-key (kbd "M-m"))
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
;; (global-set-key (kbd "C-+") 'text-scale-increase)
;; (global-set-key (kbd "C--") 'text-scale-decrease)


(windmove-default-keybindings 'super)
#+end_src

Here we make page-break characters look pretty, instead of appearing
as =^L= in Emacs. [[http://ericjmritz.name/2015/08/29/using-page-breaks-in-gnu-emacs/][Here's an informative article called "Using
Page-Breaks in GNU Emacs" by Eric J. M. Ritz.]]

#+begin_src emacs-lisp
(use-package page-break-lines
  :straight t)
#+end_src

# TODO: Change this to auto for prog-mode only
# (when (version<= "26.0.50" emacs-version )

#+BEGIN_SRC emacs-lisp
;; native line numbers
;; (setq-default display-line-numbers 'visual
;;               display-line-numbers-current-absolute t
;;               display-line-numbers-width 4
;;               display-line-numbers-widen t)
;; (global-display-line-numbers-mode t)

(add-hook 'prog-mode-hook #'display-line-numbers-mode)

;; Customize the minibuffer
;; (add-hook 'minibuffer-setup-hook 'my-minibuffer-setup)
;; (defun my-minibuffer-setup ()
;;   (set (make-local-variable 'face-remapping-alist)
;;        '((default :height 1.0))))
#+END_SRC

* Mac customizations

There are configurations to make when running Emacs on macOS (hence the
"darwin" system-type check).

#+begin_src emacs-lisp
(when (string-equal system-type "darwin")

  (add-to-list 'default-frame-alist
               '(ns-transparent-titlebar . t))
  ;; set the window frame to dark theme
  (add-to-list 'default-frame-alist
               '(ns-appearance . dark))

  ;; delete files by moving them to the trash
  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/.Trash")
  ;; Don't make new frames when opening a new file with Emacs
  (setq ns-pop-up-frames nil)

  ;; set the Fn key as the hyper key
  ;; (setq ns-function-modifier 'hyper)
  ;; (setq ns-option-modifier 'super)
  ;; (setq ns-command-modifier 'meta)

  (setq mac-option-modifier 'super)
  (setq mac-command-modifier 'meta)

  ;; typical mac bindings
  ;; (global-set-key (kbd "M-s") 'save-buffer)
  (global-set-key (kbd "M-z") 'undo)

  ;; Use Command-` to switch between Emacs windows (not frames)
  (bind-key "A-`" 'other-window)

  ;; Use Command-Shift-` to switch Emacs frames in reverse
  (bind-key "s-~" (lambda() () (interactive) (other-window -1)))

  ;; Because of the keybindings above, set one for `other-frame'
  (bind-key "S-1" 'other-frame)

  ;; Fullscreen!
  (setq ns-use-native-fullscreen nil) ; Not Lion style
  (bind-key "<s-return>" 'toggle-frame-fullscreen)

  ;; buffer switching
  (bind-key "M-[" 'previous-buffer)
  (bind-key "M-]" 'next-buffer)

  ;; Compiling
  (bind-key "H-c" 'compile)
  (bind-key "H-r" 'recompile)
  (bind-key "H-s" (defun save-and-recompile () (interactive) (save-buffer) (recompile)))

  ;; disable the key that minimizes emacs to the dock because I don't
  ;; minimize my windows
  ;; (global-unset-key (kbd "C-z"))

  ;; Not going to use these commands
  (put 'ns-print-buffer 'disabled t)
  (put 'suspend-frame 'disabled t))
#+end_src

~exec-path-from-shell~ makes the command-line path with Emacs's shell
match the same one on macOS.

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :straight t
  :init
  (exec-path-from-shell-initialize))
#+end_src

* Org mode
#+BEGIN_SRC emacs-lisp
(use-package org
  ;;:straight org-plus-contrib              ;
  :config
  (require 'org-tempo)
  )

(use-package org-auto-tangle
  :straight t
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-babel-safelist '(
                                         "~/.emacs.d/config.org"
                                         )))
#+END_SRC

** Org babel languages

#+begin_src emacs-lisp :tangle no
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)
   (calc . t)
   (latex . t)
   (java . t)
   (ruby . t)
   (lisp . t)
   (scheme . t)
   (shell . t)
   (sqlite . t)
   (js . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for these languages."
  (not (or (string= lang "C")
           (string= lang "java")
           (string= lang "python")
           (string= lang "emacs-lisp")
           (string= lang "sqlite"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src

** Org babel/source blocks

I like to have source blocks properly syntax highlighted and with the
editing popup window staying within the same window so all the windows
don't jump around. Also, having the top and bottom trailing lines in
the block is a waste of space, so we can remove them.

I noticed that fontification doesn't work with markdown mode when the
block is indented after editing it in the org src buffer---the leading
#s for headers don't get fontified properly because they appear as Org
comments. Setting ~org-src-preserve-indentation~ makes things
consistent as it doesn't pad source blocks with leading spaces.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+end_src

** Org templates

Source block templates

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp" ))
(add-to-list 'org-structure-template-alist '("rb" . "src ruby" ))
(add-to-list 'org-structure-template-alist '("sh" . "src sh" ))
( add-to-list 'org-structure-template-alist '("md" . "src markdown"))
#+END_SRC

* Window

Convenient keybindings to resize windows.

#+begin_src emacs-lisp
;; (bind-key "s-C-<left>"  'shrink-window-horizontally)
;; (bind-key "s-C-<right>" 'enlarge-window-horizontally)
;; (bind-key "s-C-<down>"  'shrink-window)
;; (bind-key "s-C-<up>"    'enlarge-window)
#+end_src

Whenever I split windows, I usually do so and also switch to the other
window as well, so might as well rebind the splitting key bindings to
do just that to reduce the repetition.

#+begin_src emacs-lisp
(defun vsplit-other-window ()
  "Splits the window vertically and switches to that window."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil))
(defun hsplit-other-window ()
  "Splits the window horizontally and switches to that window."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil))

(bind-key "C-x 2" 'vsplit-other-window)
(bind-key "C-x 3" 'hsplit-other-window)
#+end_src

** Transpose frame

#+begin_src emacs-lisp
(use-package transpose-frame
  :straight t
  :bind ("H-t" . transpose-frame))
#+end_src

** Tabs
#+begin_src emacs-lisp
;; (use-package centaur-tabs
;;   :straight t
;;   :hook
;;   (dired-mode . centaur-tabs-local-mode)
;;   :config
;;   (setq centaur-tabs-style "bar"
;;         centaur-tabs-plain-icons t
;;         centaur-tabs-modified-marker t
;;         centaur-tabs-gray-out-icons 'buffer
;;         centaur-tabs-modified-marker "*")
;; ;;  (centaur-tabs-headline-match)
;;   (centaur-tabs-mode t)
;;   :bind
;;   ("C-<prior>" . centaur-tabs-backward)
;;   ("C-<next>" . centaur-tabs-forward))

#+end_src

* Whitespace mode
# TODO: Add whitespace cleanup config
#+begin_src emacs-lisp
(use-package whitespace
  :straight nil
  :diminish
  :hook ((prog-mode outline-mode conf-mode) . whitespace-mode)
  :bind (("s-<f10>" . whitespace-mode)
         ("C-c w" . whitespace-cleanup))
  :config
  (setq whitespace-line-column fill-column) ;; limit line length
  ;; automatically clean up bad whitespace
  (setq whitespace-action '(auto-cleanup))
  ;; only show bad whitespace
  (setq whitespace-style '(face
                           trailing space-before-tab
                           indentation empty space-after-tab)))

#+end_src

* ELPA packages

These are the packages that are not built into Emacs.

** Ag

#+BEGIN_SRC emacs-lisp
(use-package ag
  :commands ag
  :defer t
  :straight t)
#+END_SRC

** Ace Jump Mode

A quick way to jump around text in buffers.

[[http://emacsrocks.com/e10.html][See Emacs Rocks Episode 10 for a screencast.]]

#+begin_src emacs-lisp
(use-package ace-jump-mode
  :straight t
  :diminish ace-jump-mode
  :commands ace-jump-mode
  :bind ("C-s-s" . ace-jump-mode))
#+end_src

** Ace Window

[[https://github.com/abo-abo/ace-window][ace-window]] is a package that uses the same idea from ace-jump-mode for
buffer navigation, but applies it to windows. The default keys are
1-9, but it's faster to access the keys on the home row, so that's
what I have them set to (with respect to Dvorak, of course).

#+begin_src emacs-lisp
(use-package ace-window
  :straight t
  :defer t
  :config
  (setq aw-keys '(?a ?o ?e ?u ?h ?t ?n ?s))
  (ace-window-display-mode)
  :bind ("s-o" . ace-window))
#+end_src
#+end_src

** Aggressive Indent
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :straight t
  :config
  :defer t
  ;; (add-hook 'prog-mode-hook #'aggressive-indent-mode)
  )
#+END_SRC

** Browse URL
#+begin_src emacs-lisp
;; Pass a URL to a WWW browser
(use-package browse-url
  :straight nil
  :defer t
  :defines dired-mode-map
  :bind (("C-c C-z ." . browse-url-at-point)
         ("C-c C-z b" . browse-url-of-buffer)
         ("C-c C-z r" . browse-url-of-region)
         ("C-c C-z u" . browse-url)
         ("C-c C-z v" . browse-url-of-file))
  :init
  (with-eval-after-load 'dired
    (bind-key "C-c C-z f" #'browse-url-of-file dired-mode-map)))

;; Click to browse URL or to send to e-mail address
(use-package goto-addr
  :straight nil
  :hook ((text-mode . goto-address-mode)
         (prog-mode . goto-address-prog-mode)))


#+end_src

** Crux

Collection of Ridiculously Useful eXtensions

#+BEGIN_SRC emacs-lisp
(use-package crux
  :straight t
  :bind (("C-c o o" . crux-open-with)
         ("C-c o u" . crux-view-url)
         ("C-a" . crux-move-beginning-of-line)
         ("C-x r" . crux-recentf-find-file)))
#+END_SRC
** Dash

Integration with [[http://kapeli.com/dash][Dash, the API documentation browser on macOS]]. The
binding ~s-D~ is the same as Cmd-Shift-D, the same binding that dash
uses in Android Studio (trying to keep things consistent with the
tools I use).

#+begin_src emacs-lisp
(use-package dash-at-point
  :straight t
  :defer t
  :bind (("s-D"     . dash-at-point)
         ("C-c e"   . dash-at-point-with-docset)))
#+end_src

** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :straight t
  :config
  (dashboard-setup-startup-hook))
#+END_SRC
** Dired Ranger
#+begin_src emacs-lisp
(use-package dired-ranger
  :straight t
  :bind (:map dired-mode-map
              ("W" . dired-ranger-copy)
              ("X" . dired-ranger-move)
              ("Y" . dired-ranger-paste)))
#+end_src
** Expand Region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :straight t
  :bind ("C-=" . er/expand-region))
#+END_SRC
** Flycheck

Still need to set up hooks so that flycheck automatically runs in
python mode, etc. js2-mode is already really good for the syntax
checks, so I probably don't need the jshint checks with flycheck for
it.

#+begin_src emacs-lisp
(use-package flycheck
  :straight t
  :defer 10
  :bind (("C-c n" . 'flycheck-next-error)
         ;; ("C-c p" . 'flycheck-previous-error)
         )
  ;; :config
  ;; (add-hook 'prog-mood-hook 'flycheck-mode)
  ;; (setq flycheck-html-tidy-executable "tidy5")
  ;; ;;(add-hook 'flycheck-mode-hook 'shan/use-eslint-from-node-modules)
  ;; (setq-default flycheck-disabled-checkers '(ruby-reek ruby-rubylint))
  ;; (add-hook 'ruby-mode-hook
  ;;           (lambda ()
  ;;            (flycheck-disable-checker 'ruby-reek)))
  )

(use-package flycheck-posframe
  :straight t
  :after flycheck
  :init
  :config (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode)
  (set-face-attribute 'flycheck-posframe-error-face nil :inherit 'error :height 120)
  (set-face-attribute 'flycheck-posframe-warning-face nil :inherit 'warning :height 120)
  (set-face-attribute 'flycheck-posframe-info-face nil :inherit 'info :height 120)
  )
#+end_src
** Highlight Indent Guides
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :straight t
  :defer t
  :init
  (setq highlight-indent-guides-method 'character)
  ;; (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  )

#+END_SRC

** HL TODO
#+begin_src emacs-lisp
(use-package hl-todo
  :straight t
  :defer t
  :custom-face (hl-todo ((t (:box t :inherit))))
  :bind (:map hl-todo-mode-map
              ([C-f3] . hl-todo-occur)
              ("C-c t p" . hl-todo-previous)
              ("C-c t n" . hl-todo-next)
              ("C-c t o" . hl-todo-occur))
  :hook (after-init . global-hl-todo-mode))
#+end_src
** Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src emacs-lisp
(use-package magit
  :straight t
  :defer t
  :bind ("C-x g" . magit-status))

;; (use-package forge
;;   :after magit
;;   :defer t)

(use-package git-gutter
  :straight t
  :config
  (global-git-gutter-mode 't)
  :diminish git-gutter-mode)

(use-package git-timemachine
  :straight t)

;; (use-package git-modes
;;   :straight t
;;   :defer t)

(use-package git-link
  :straight t
  :defer t)

(use-package git-messenger
  :straight t
  :defer t
  :bind ("C-x v p" . 'git-messenger:popup-message))
#+end_src

** Markdown mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :defer t
  :straight t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode)))
#+end_src

** Multiple cursors

We'll also need to ~(require 'multiple-cusors)~ because of [[https://github.com/magnars/multiple-cursors.el/issues/105][an autoload issue]].

#+begin_src emacs-lisp
(use-package multiple-cursors
  :straight t
  :defer t
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->"         . mc/mark-next-like-this)
         ("C-<"         . mc/mark-previous-like-this)
         ("C-c C-<"     . mc/mark-all-like-this)
         ("C-!"         . mc/mark-next-symbol-like-this)
         ("s-d"         . mc/mark-all-dwim)))
#+end_src

** Rainbow mode + delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :straight t
  :diminish rainbow-delimiters-mode
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package rainbow-mode
  :straight t
  :diminish rainbow-mode
  :hook (prog-mode . rainbow-mode)
  :config
  (setq rainbow-x-colors nil))

#+END_SRC

** Webmode

#+begin_src emacs-lisp :tangle no
(use-package web-mode
  :straight t
  :defer t
  :mode ("\\.html\\'")
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-engines-alist
        '(("django" . "focus/.*\\.html\\'")
          ("ctemplate" . "realtimecrm/.*\\.html\\'"))))

(setq-default   web-mode-markup-indent-offset 2
                web-mode-css-indent-offset 2
                web-mode-code-indent-offset 2
                web-mode-attr-indent-offset 2
                )
#+end_src

** Yasnippet

Yeah, snippets! I start with snippets from [[https://github.com/AndreaCrotti/yasnippet-snippets][Andrea Crotti's collection]]
and have also modified them and added my own.

#+begin_src emacs-lisp :tangle no
(use-package yasnippet
  :straight t
  :diminish yas-minor-mode
  :defert t
  :config
  (setq yas-snippet-dirs (concat user-emacs-directory "snippets"))
  (setq yas-indent-line 'fixed)
  (yas-global-mode)
  (global-set-key (kbd "M-/") 'company-yasnippet))
#+end_src

** Scratch

Convenient package to create =*scratch*= buffers that are based on the
current buffer's major mode. This is more convienent than manually
creating a buffer to do some scratch work or reusing the initial
=*scratch*= buffer.

#+begin_src emacs-lisp
(use-package scratch
  :straight t
  :commands scratch)

(use-package persistent-scratch
  :straight t
  :init
  (persistent-scratch-setup-default))
#+end_src

** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :straight t
  :diminish smartparens-mode
  :config
  (add-hook 'prog-mode-hook 'smartparens-mode))
#+END_SRC

** Super Save
#+BEGIN_SRC emacs-lisp
(use-package super-save
  :straight t
  :defer t
  :config
  ;; (super-save-mode +1)
  )
#+END_SRC
** Undo Tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :straight t
  :diminish undo-tree-mode
  :config
  ;; (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
  (setq undo-tree-auto-save-history nil)
  :init
  (global-undo-tree-mode))
#+END_SRC

** Vterm
#+begin_src emacs-lisp
(use-package vterm
  :straight t
  :commands vterm
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  ;;(setq vterm-shell "zsh")
  (setq vterm-max-scrollback 10000))

(use-package multi-vterm
  :straight t
  ;; :config
  ;; (add-hook 'vterm-mode-hook
  ;;           (lambda ()
  ;;             (setq-local evil-insert-state-cursor 'box)
  ;;             (evil-insert-state)))
  ;; (define-key vterm-mode-map [return]                      #'vterm-send-return)

  ;; (setq vterm-keymap-exceptions nil)
  )

#+end_src

** Which Key
# TODO: Needs configuration
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :straight t
  :diminish which-key-mode
  :config
  :hook (after-init-hook . which-key-mode))

#+END_SRC

* Languages
** JSON
Install json-mode and make its reformat keybinding match the global default.

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :commands json-mode
  :config
  (bind-keys :map json-mode-map
             ("C-c <tab>" . json-mode-beautify)))

#+END_SRC
** Ruby
#+BEGIN_SRC emacs-lisp
(use-package ruby-mode
  :straight t
  :mode "\\.rb\\'"
  :mode "Rakefile\\'"
  :mode "Gemfile\\'"
  :mode "Capfile\\'"
  :mode "Guardfile\\'"
  :mode "Berksfile\\'"
  :mode "Vagrantfile\\'"
  :interpreter "ruby"

  :init
  (setq ruby-indent-level 2
        ruby-indent-tabs-mode nil)
  (add-hook 'ruby-mode 'subword-mode)

  :bind
  (([(meta down)] . ruby-forward-sexp)
   ([(meta up)]   . ruby-backward-sexp)
   ("C-c C-e"     . ruby-send-region)))  ;; Rebind since Rubocop uses C-c C-r

;; Rbenv
(use-package rbenv
  :straight t
  :defer t
  :init (setq rbenv-show-active-ruby-in-modeline nil)
  :config (progn
            (global-rbenv-mode)
            (add-hook 'ruby-mode-hook 'rbenv-use-corresponding)))


;; Rubocop
(use-package rubocop
  :straight t
  :diminish rubocop-mode
  :defer t
  :init
  (add-hook 'ruby-mode-hook 'rubocop-mode))

;; InfRuby to change ruby
(use-package inf-ruby
  :straight t
  :init
  (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode))

;; Robe
(use-package robe
  :straight t
  :bind ("C-M-." . robe-jump)
  :hook (ruby-mode . robe-mode)
  :config
  (defadvice inf-ruby-console-auto
      (before activate-rbenv-for-robe activate)
    (rbenv-use-corresponding))
  )

;; in buffer interpreter
(use-package seeing-is-believing
  :straight t
  :delight
  :diminish seeing-is-believing
  ;; :hook (ruby-mode . seeing-is-believing)
  :config
  (setq seeing-is-believing-max-length 150
        seeing-is-believing-max-results 10
        seeing-is-believing-timeout 10.5
        seeing-is-believing-alignment 'file))

;; Ruby Tools
(use-package ruby-tools
  :straight t
  :diminish ruby-tools-mode
  :delight
  :defer t
  :init
  (add-hook 'ruby-mode-hook 'ruby-tools-mode))

;; RSpec
(use-package rspec-mode
  :straight t
  :diminish rspec-mode
  :init
  (setq rspec-use-rake-when-possible nil)
  (setq rspec-spec-command "rspec")
  (setq rspec-use-spring-when-possible nil)
  (add-hook 'ruby-mode-hook 'rspec-mode)

  :config
  (defadvice rspec-compile (around rspec-compile-around)

    "Use BASH shell for running the specs because of ZSH issues."
    (let ((shell-file-name "/bin/bash"))
      ad-do-it))

  ;; (bind-keys :map rspec-mode-map
  ;;            ;; ("<return>" . reindent-phen-newline-and-indent)
  ;;            ("M-p ;" . rspec-poggle-spec-and-parget)
  ;;            ("M-p d" . rspec-disable-example)
  ;;            ("M-p e" . rspec-enable-example)
  ;;            ("M-p t" . rspec-verify-single)
  ;;            ("M-p l" . rspec-rerun)
  ;;            ("M-p f" . rspec-verify)
  ;;            ("M-p a" . rspec-verify-all))
  (ad-activate 'rspec-compile))

;; YAML
(use-package yaml-mode
  :straight t
  :mode ("\\.ya?ml\\'" . yaml-mode))

#+END_SRC
** Clojure
#+begin_src emacs-lisp
(use-package clojure-mode
  :straight t
  :mode "\\.clj$"
  :init
  (setq clojure-align-forms-automatically t))

(use-package cider
  :straight t
  :hook (clojure-mode . cider-mode)
  :init
  (setq nrepl-hide-special-buffers t)
  (setq nrepl-sync-request-timeout nil)
  (setq cider-repl-display-help-banner nil))

(use-package org
  :config
  (require 'ob-clojure)
  (setq org-babel-clojure-backend 'cider))
#+end_src

* Misc
** Non-ELPA packages
*** HideShow Vis
#+BEGIN_SRC emacs-lisp
(use-package hideshowvis
  :load-path "~/.emacs.d/github/hideshowvis"
  :diminish hideshowvis-enable
  :config
  (add-hook 'prog-mode-hook 'hideshowvis-minor-mode)
  (hideshowvis-symbols))
#+END_SRC
** Display Time

When displaying the time with =display-time-mode=, I don't care about
the load average.

#+begin_src emacs-lisp
(setq display-time-default-load-average nil)
#+end_src

** Display Battery Mode

See the documentation for =battery-mode-line-format= for the format
characters.

#+begin_src emacs-lisp
(setq battery-mode-line-format "[%b%p%% %t]")
#+end_src

* Completions

** Vertico + Marginalia
#+begin_src emacs-lisp
(use-package vertico
  :straight t
  :bind (:map vertico-map
              ("C-j" . vertico-next)
              ("C-k" . vertico-previous)
              ("C-f" . vertico-exit)
              :map minibuffer-local-map
              ("M-h" . backward-kill-word))
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode))

(use-package savehist
  :init
  (setq history-length 25)
  (savehist-mode))

(use-package marginalia
  :after vertico
  :ensure t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src

** Consult
#+begin_src emacs-lisp
;; Example configuration for Consult
(use-package consult
  :straight t
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ;; ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  :config

  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key (kbd "M-.")
   :preview-key '(:debounce 0.4 any))

  (setq consult-narrow-key "<") ;; (kbd "C-+")

  )
#+end_src
** Corfu
#+begin_src emacs-lisp
(use-package corfu
  :straight t
  :hook (lsp-completion-mode . kb/corfu-setup-lsp) ; Use corfu for lsp completion
  :general
  (:keymaps 'corfu-map
            :states 'insert
            "C-n" #'corfu-next
            "C-p" #'corfu-previous
            "<escape>" #'corfu-quit
            "<return>" #'corfu-insert
            "H-SPC" #'corfu-insert-separator
            ;; "SPC" #'corfu-insert-separator ; Use when `corfu-quit-at-boundary' is non-nil
            "M-d" #'corfu-show-documentation
            "C-g" #'corfu-quit
            "M-l" #'corfu-show-location)
  :custom
  ;; Works with `indent-for-tab-command'. Make sure tab doesn't indent when you
  ;; want to perform completion
  (tab-always-indent 'complete)
  (completion-cycle-threshold nil)      ; Always show candidates in menu

  (corfu-auto nil)
  (corfu-auto-prefix 2)
  (corfu-auto-delay 0.25)

  (corfu-min-width 80)
  (corfu-max-width corfu-min-width)     ; Always have the same width
  (corfu-count 14)
  (corfu-scroll-margin 4)
  (corfu-cycle nil)

  ;; `nil' means to ignore `corfu-separator' behavior, that is, use the older
  ;; `corfu-quit-at-boundary' = nil behavior. Set this to separator if using
  ;; `corfu-auto' = `t' workflow (in that case, make sure you also set up
  ;; `corfu-separator' and a keybind for `corfu-insert-separator', which my
  ;; configuration already has pre-prepared). Necessary for manual corfu usage with
  ;; orderless, otherwise first component is ignored, unless `corfu-separator'
  ;; is inserted.
  (corfu-quit-at-boundary nil)
  (corfu-separator ?\s)            ; Use space
  (corfu-quit-no-match 'separator) ; Don't quit if there is `corfu-separator' inserted
  (corfu-preview-current 'insert)  ; Preview first candidate. Insert on input if only one
  (corfu-preselect-first t)        ; Preselect first candidate?

  ;; Other
  (corfu-echo-documentation nil)        ; Already use corfu-doc
  (lsp-completion-provider :none)       ; Use corfu instead for lsp completions
  :init
  (global-corfu-mode)
  :config

  ;; Enable Corfu more generally for every minibuffer, as long as no other
  ;; completion UI is active. If you use Mct or Vertico as your main minibuffer
  ;; completion UI. From
  ;; https://github.com/minad/corfu#completing-with-corfu-in-the-minibuffer
  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active) ; Useful if I ever use MCT
                (bound-and-true-p vertico--input))
      (setq-local corfu-auto nil)       ; Ensure auto completion is disabled
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)

  ;; Setup lsp to use corfu for lsp completion
  (defun kb/corfu-setup-lsp ()
    "Use orderless completion style with lsp-capf instead of the
default lsp-passthrough."
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless))))

#+end_src
* Mail
#+begin_src emacs-lisp
(use-package mu4e
  :load-path  "/opt/homebrew/Cellar/mu/1.8.13/share/emacs/site-lisp/mu/mu4e/"
  :config
  (setq mu4e-mu-binary (executable-find "mu"))
  ;; This is set to 't' to avoid mail syncing issues when using mbsync
  (setq mu4e-change-filenames-when-moving t)

  ;; Refresh mail using isync every 10 minutes
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-maildir "~/Mail")

  (setq mu4e-contexts
        (list
         ;; Addval account
         (make-mu4e-context
          :name "Addval"
          :match-func
          (lambda (msg)
            (when msg
              (string-prefix-p "/Addval" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "shan@addvalsolutions.com")
                  (user-full-name    . "Shantanu Bhardwaj")
                  (smtpmail-smtp-server  . "smtp.gmail.com")
                  (smtpmail-smtp-service . 465)
                  (smtpmail-stream-type  . ssl)
                  (mu4e-drafts-folder  . "/Addval/[Gmail]/Drafts")
                  (mu4e-sent-folder  . "/Addval/[Gmail]/Sent Mail")
                  (mu4e-refile-folder  . "/Addval/[Gmail]/All Mail")
                  (mu4e-trash-folder  . "/Addval/[Gmail]/Trash")))

         ;; Kulcare account
         (make-mu4e-context
          :name "Kulcare"
          :match-func
          (lambda (msg)
            (when msg
              (string-prefix-p "/Kulcare" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "shantanu@kulcare.com")
                  (user-full-name    . "Shantanu Bhardwaj")
                  ;; (smtpmail-smtp-server  . "smtp.gmail.com")
                  ;; (smtpmail-smtp-service . 465)
                  ;; (smtpmail-stream-type  . ssl)
                  (mu4e-drafts-folder  . "/Kulcare/[Gmail]/Drafts")
                  (mu4e-sent-folder  . "/Kulcare/[Gmail]/Sent Mail")
                  (mu4e-refile-folder  . "/Kulcare/[Gmail]/All Mail")
                  (mu4e-trash-folder  . "/Kulcare/[Gmail]/Trash")))

         ;; Codetiger account
         (make-mu4e-context
          :name "Codetiger"
          :match-func
          (lambda (msg)
            (when msg
              (string-prefix-p "/Codetiger" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "shan@codetiger.com")
                  (user-full-name    . "Shan Bhardwaj")
                  ;; (smtpmail-smtp-server  . "smtp.gmail.com")
                  ;; (smtpmail-smtp-service . 465)
                  ;; (smtpmail-stream-type  . ssl)
                  (mu4e-drafts-folder  . "/Codetiger/[Gmail]/Drafts")
                  (mu4e-sent-folder  . "/Codetiger/[Gmail]/Sent Mail")
                  (mu4e-refile-folder  . "/Codetiger/[Gmail]/All Mail")
                  (mu4e-trash-folder  . "/Codetiger/[Gmail]/Trash")))

         ;; Gmail account
         (make-mu4e-context
          :name "Gmail"
          :match-func
          (lambda (msg)
            (when msg
              (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "bhardwaj.10@gmail.com")
                  (user-full-name    . "Shantanu Bhardwaj")
                  ;; (smtpmail-smtp-server  . "smtp.gmail.com")
                  ;; (smtpmail-smtp-service . 465)
                  ;; (smtpmail-stream-type  . ssl)
                  (mu4e-drafts-folder  . "/Gmail/[Gmail]/Drafts")
                  (mu4e-sent-folder  . "/Gmail/[Gmail]/Sent Mail")
                  (mu4e-refile-folder  . "/Gmail/[Gmail]/All Mail")
                  (mu4e-trash-folder  . "/Gmail/[Gmail]/Trash")))))

  ;; sending email
  ;; --------------

  ;; Make sure plain text mails flow correctly for recipients
  (setq mu4e-compose-format-flowed t)

  ;; Only ask if a context hasn't been previously picked
  (setq mu4e-compose-context-policy 'ask-if-none)

  ;; don't keep message compose buffers around after sending:
  (setq message-kill-buffer-on-exit t)

  ;; send function:
  (setq send-mail-function 'sendmail-send-it
        message-send-mail-function 'sendmail-send-it)

  ;; send program:
  ;; this is exeranal. remember we installed it before.
  (setq sendmail-program (executable-find "msmtp"))

  ;; select the right sender email from the context.
  (setq message-sendmail-envelope-from 'header)


  (setq mu4e-maildir-shortcuts
        '(("/Kulcare/Inbox"             . ?i)
          ("/Addval/Inbox"              . ?w)
          ("/Kulcare/[Gmail]/Sent Mail" . ?s)
          ("/Kulcare/[Gmail]/Trash"     . ?t)
          ("/Kulcare/[Gmail]/Drafts"    . ?d)
          ("/Kulcare/[Gmail]/All Mail"  . ?a))))

;; (use-package mu4e-thread-fast-folding
;;   :load-path "~/.emacs.d/github/mu4e-tff/")
;; (mu4e-thread-folding-mode 1)

(use-package mu4e-alert
  :straight t
  :hook (after-init-hook . mu4e-alert-enable-mode-line-display)
  :config
  (setq mu4e-alert-email-notification-types '(count)))

(use-package mu4e-column-faces
  :straight t)

;; (use-package mu4e-dashboard
;;   :straight t)


#+end_src
** SVG Lib
#+begin_src emacs-lisp
(use-package svg-lib
  :straight t)
#+end_src
