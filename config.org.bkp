#+TITLE: Emacs Configuration
#+AUTHOR: Shantanu Bhardwaj

I have been using Emacs since 2000 and i have declared Emacs Bankruptcy
many times. It  has always been a learning experience. Mostly it works best
when I stick with it.

* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Shantanu Bhardwaj"
      user-mail-address "shan@addvalsolutions.com")
#+end_src

* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq max-lisp-eval-depth 10000)
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
(menu-bar-mode -1)
#+end_src

* System Detection
#+begin_src emacs-lisp
(defconst sys/win32p
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst sys/linuxp
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst sys/macp
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defconst sys/mac-x-p
  (and (display-graphic-p) sys/macp)
  "Are we running under X on a Mac system?")

(defconst sys/linux-x-p
  (and (display-graphic-p) sys/linuxp)
  "Are we running under X on a GNU/Linux system?")

(defconst emacs/>=25p
  (>= emacs-major-version 25)
  "Emacs is 25 or above.")

(defconst emacs/>=26p
  (>= emacs-major-version 26)
  "Emacs is 26 or above.")

(defconst emacs/>=27p
  (>= emacs-major-version 27)
  "Emacs is 27 or above.")

#+end_src

* Custom functions
#+begin_src emacs-lisp
(defun align-values (start end)
  "Vertically aligns region based on lengths of the first value of each line.
Example output:

        foo        bar
        foofoo     bar
        foofoofoo  bar"
  (interactive "r")
  (align-regexp start end
                "\\([a-z_]+: \\)"
                -1 1 nil))
#+end_src

#+begin_src emacs-lisp
  (defun fontify-frame (frame)
    (interactive)
    (if sys/macp
        (progn
          (if (> (x-display-pixel-width) 4000)
              (set-frame-parameter frame 'font "Monaco 14") ;; 5k Display
            (set-frame-parameter frame 'font "Monaco 12")))))

  ;; Fontify current frame
  (fontify-frame nil)

  ;; Fontify any future frames
  (push 'fontify-frame after-make-frame-functions)

#+end_src
* Theme

** Doom theme

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (doom-themes-visual-bell-config)
  (doom-themes-org-config)
  (load-theme 'doom-spacegrey t)
  )

(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode)
  :config
  (setq doom-modeline-buffer-file-name-style 'truncate-all)
  ;; (setq doom-modeline-icon t)
  ;; (setq doom-modeline-major-mode-icon t)
  ;; (setq doom-modeline-checker-simple-format nil)
  ;; (set-face-attribute 'mode-line nil :height 0.9)
  ;; (set-face-attribute 'mode-line-inactive nil :height 0.9)
  (setq doom-modeline-height 12)
  )

#+END_SRC
** Convenient theme functions

#+begin_src emacs-lisp
(defun reset-modeline()
  "Reset the modeline to 12pt font"
  (interactive)
  (set-face-attribute 'mode-line nil :height 100)
  (set-face-attribute 'mode-line-inactive nil :height 100)
  (setq doom-modeline-height 12)
  (set-face-attribute 'line-number nil :font "Monaco-10")
  (set-face-attribute 'line-number-current-line nil :font "Monaco-10")
  )

(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)
    (reset-modeline)
    ))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "s-<f12>" 'switch-theme)
(bind-key "s-<f11>" 'disable-active-themes)
#+end_src

* Font

[[http://adobe-fonts.github.io/source-code-pro/][Source Code Pro]] is a nice monospaced font.

To install it on macOS, you can use Homebrew with [[http://caskroom.io/][Homebrew Cask]].

#+begin_src sh :tangle no
# You may need to run these two lines if you haven't set up Homebrew
# Cask and its fonts formula.
brew install caskroom/cask/brew-cask
brew tap caskroom/fonts

brew cask install font-source-code-pro
#+end_src

And here's how we tell Emacs to use the font we want to use.

#+begin_src emacs-lisp
;; (add-to-list 'default-frame-alist
;;              ;; '(font . "-*-Operator Mono-medium-normal-normal-*-14-*-*-*-m-0-iso10646-1")
;;              ;; '(font . "Monaco for Powerline-12")
;;              ;; '(font . "Cascadia Mono-14")
;;              )

#+end_src

Note: To view all fonts that are available to use, run the following:

#+BEGIN_SRC emacs-lisp :tangle no
(font-family-list)
#+END_SRC

Display emojis. Source of system-specific fonts is in [[https://github.com/syohex/emacs-ac-emoji][the README for
the emacs-ac-emoji package.]]

#+BEGIN_SRC emacs-lisp
(let ((font (if (= emacs-major-version 25)
                "Symbola"
              (cond ((string-equal system-type "darwin")    "Apple Color Emoji")
                    ((string-equal system-type "gnu/linux") "Symbola")))))
  (set-fontset-font t 'unicode font nil 'prepend))
#+END_SRC

** Custom Mode faces

*** Echo Area
#+begin_src emacs-lisp
(with-current-buffer " *Echo Area 0*" (face-remap-add-relative 'default '(:family "Monaco" :height 110)))
#+end_src

*** Term Faces

#+begin_src emacs-lisp
;; Use monospaced font faces in current buffer
(defun my-term-mode-face ()
  "Sets a fixed width (monospace) font in current buffer"
  (interactive)
  (setq buffer-face-mode-face '(:family "Monaco" :height 100))
  (buffer-face-mode))

#+end_src
* Sane defaults

Let's start with some sane defaults, shall we?

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+begin_src emacs-lisp
;; These functions are useful. Activate them.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
(setq-default indent-tabs-mode nil)

;; Turn off the blinking cursor
(blink-cursor-mode -1)

(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)

;; Don't count two spaces after a period as the end of a sentence.
;; Just one space is needed.
(setq sentence-end-double-space nil)

;; delete the region when typing, just like as we expect nowadays.
(delete-selection-mode t)

(show-paren-mode t)

(column-number-mode t)

;; (global-visual-line-mode -1)
(remove-hook 'text-mode-hook #'turn-on-auto-fill)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
(diminish 'visual-line-mode)

(setq uniquify-buffer-name-style 'forward)

;; -i gets alias definitions from .bash_profile
(setq shell-command-switch "-ic")

;; Don't beep at me
(setq visible-bell nil)

;; highlight current line everywhere
(global-hl-line-mode 1)

(global-unset-key (kbd "M-m"))
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
                  ;; (global-set-key (kbd "C-+") 'text-scale-increase)
                  ;; (global-set-key (kbd "C--") 'text-scale-decrease)


(windmove-default-keybindings 'super)
#+end_src

Here we make page-break characters look pretty, instead of appearing
as =^L= in Emacs. [[http://ericjmritz.name/2015/08/29/using-page-breaks-in-gnu-emacs/][Here's an informative article called "Using
Page-Breaks in GNU Emacs" by Eric J. M. Ritz.]]

#+begin_src emacs-lisp
;; (use-package page-break-lines
;;   :ensure t)
#+end_src

# TODO: Change this to auto for prog-mode only
# (when (version<= "26.0.50" emacs-version )

#+BEGIN_SRC emacs-lisp
;; native line numbers
;; (setq-default display-line-numbers 'visual
;;               display-line-numbers-current-absolute t
;;               display-line-numbers-width 4
;;               display-line-numbers-widen t)
;; (global-display-line-numbers-mode t)

(add-hook 'prog-mode-hook #'display-line-numbers-mode)

;; Customize the minibuffer
(add-hook 'minibuffer-setup-hook 'my-minibuffer-setup)
(defun my-minibuffer-setup ()
  (set (make-local-variable 'face-remapping-alist)
       '((default :height 0.9))))
#+END_SRC

* Mac customizations

There are configurations to make when running Emacs on macOS (hence the
"darwin" system-type check).

#+begin_src emacs-lisp
(when (string-equal system-type "darwin")

  (add-to-list 'default-frame-alist
               '(ns-transparent-titlebar . t))
  ;; set the window frame to dark theme
  (add-to-list 'default-frame-alist
               '(ns-appearance . dark))

  ;; delete files by moving them to the trash
  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/.Trash")
  ;; Don't make new frames when opening a new file with Emacs
  (setq ns-pop-up-frames nil)

  ;; set the Fn key as the hyper key
  ;; (setq ns-function-modifier 'hyper)
  ;; (setq ns-option-modifier 'super)
  ;; (setq ns-command-modifier 'meta)

  (setq mac-option-modifier 'super)
  (setq mac-command-modifier 'meta)

  ;; typical mac bindings
  (global-set-key (kbd "M-s") 'save-buffer)
  (global-set-key (kbd "M-z") 'undo)

  ;; Use Command-` to switch between Emacs windows (not frames)
  (bind-key "A-`" 'other-window)

  ;; Use Command-Shift-` to switch Emacs frames in reverse
  (bind-key "s-~" (lambda() () (interactive) (other-window -1)))

  ;; Because of the keybindings above, set one for `other-frame'
  (bind-key "S-1" 'other-frame)

  ;; Fullscreen!
  (setq ns-use-native-fullscreen nil) ; Not Lion style
  (bind-key "<s-return>" 'toggle-frame-fullscreen)

  ;; buffer switching
  (bind-key "M-[" 'previous-buffer)
  (bind-key "M-]" 'next-buffer)

  ;; Compiling
  (bind-key "H-c" 'compile)
  (bind-key "H-r" 'recompile)
  (bind-key "H-s" (defun save-and-recompile () (interactive) (save-buffer) (recompile)))

  ;; disable the key that minimizes emacs to the dock because I don't
  ;; minimize my windows
  ;; (global-unset-key (kbd "C-z"))

  ;; Not going to use these commands
  (put 'ns-print-buffer 'disabled t)
  (put 'suspend-frame 'disabled t))
#+end_src

~exec-path-from-shell~ makes the command-line path with Emacs's shell
match the same one on macOS.

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :ensure t
  :init
  (exec-path-from-shell-initialize))
#+end_src

** Open other apps from Emacs

#+BEGIN_SRC emacs-lisp
(defun open-dir-in-finder ()
  "Open a new Finder window to the path of the current buffer"
  (interactive)
  (start-process "mai-open-dir-process" nil "open" "."))

(defun open-dir-in-iterm ()
  "Open the current directory of the buffer in iTerm."
  (interactive)
  (let* ((iterm-app-path "/Applications/iTerm.app")
         (iterm-brew-path "/opt/homebrew-cask/Caskroom/iterm2/1.0.0/iTerm.app")
         (iterm-path (if (file-directory-p iterm-app-path)
                         iterm-app-path
                       iterm-brew-path)))
    (start-process "mai-open-dir-process" nil "open" "-a" iterm-path ".")))

(defun open-dir-in-studio ()
  "Open the current directory in Android Studio."
  (interactive)
  (start-process "mai-open-dir-process" nil "studio" "."))

(bind-key "C-c o f" 'open-dir-in-finder)
(bind-key "C-c o t" 'open-dir-in-iterm)
(bind-key "C-c o a" 'open-dir-in-studio)
#+END_SRC

** El Capitan fixes

http://stuff-things.net/2015/10/05/emacs-visible-bell-work-around-on-os-x-el-capitan/

#+BEGIN_SRC emacs-lisp
;; (let* ((cmd "sw_vers -productVersion")
;;        (macos-version (string-to-int
;;                      (cadr (split-string
;;                             (shell-command-to-string cmd)
;;                             "\\."))))
;;        (elcapitan-version 11))
;;   (when (>= macos-version elcapitan-version)
;;     (setq visible-bell nil)
;;     (setq ring-bell-function 'ignore)

;;     ;; El Capitan full screen animation is quick and delightful (enough to start using it).
;;     (setq ns-use-native-fullscreen t)))
#+END_SRC


* Org mode

Truly the way to [[http://orgmode.org/][live life in plain text]]. I mainly use it to take
notes and save executable source blocks. I'm also starting to make use
of its agenda, timestamping, and capturing features.

It goes without saying that I also use it to manage my Emacs config.

** Installation

Although Org mode ships with Emacs, the latest version can be installed externally. The configuration here follows the [[http://orgmode.org/elpa.html][Org mode ELPA installation instructions]].

#+BEGIN_SRC emacs-lisp
  (use-package org
    ;;:ensure org-plus-contrib              ;
    :config
    ;; (require 'org-tempo)
    )
#+END_SRC

On Org mode version 9 I wasn't able to execute source blocks out of the box. [[https://emacs.stackexchange.com/a/28604][Others have ran into the same issue too]]. The solution is to remove the .elc files from the package directory:

#+BEGIN_SRC sh :var ORG_DIR=(let* ((org-v (cadr (split-string (org-version nil t) "@"))) (len (length org-v))) (substring org-v 1 (- len 2)))
rm ${ORG_DIR}/*.elc
#+END_SRC

** Org activation bindings

Set up some global key bindings that integrate with Org Mode features.

#+begin_src emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)
#+end_src

*** Org agenda

Learned about [[https://github.com/sachac/.emacs.d/blob/83d21e473368adb1f63e582a6595450fcd0e787c/Sacha.org#org-agenda][this =delq= and =mapcar= trick from Sacha Chua's config]].

#+begin_src emacs-lisp
(setq org-agenda-files
      (delq nil
            (mapcar (lambda (x) (and (file-exists-p x) x))
                    '("~/Dropbox/Agenda"))))
#+end_src

*** Org capture

#+begin_src emacs-lisp
(bind-key "C-c c" 'org-capture)
(setq org-default-notes-file "~/Dropbox/Notes/notes.org")
#+end_src

** Org setup

Speed commands are a nice and quick way to perform certain actions
while at the beginning of a heading. It's not activated by default.

See the doc for speed keys by checking out [[elisp:(info%20"(org)%20speed%20keys")][the documentation for
speed keys in Org mode]].

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

#+begin_src emacs-lisp
(setq org-image-actual-width 550)
#+end_src

#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex script entities))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-startup-indented 'f)
(setq org-directory "~/Dropbox/Apps/Org")
(setq org-special-ctrl-a/e 't)
(setq org-default-notes-file (concat org-directory "/Notes.org"))
(define-key global-map "\C-cc" 'org-capture)
(setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
(setq org-src-fontify-natively 't)
(setq org-src-tab-acts-natively t)
(setq org-src-window-setup 'current-window)

(setq org-agenda-files (quote ("~/Dropbox/Apps/Org/Inbox.org"
                               ;;                                "~/Dropbox/Apps/Org/Addval.org"
                               ;;                                "~/Dropbox/Apps/Org/Brandbin.org"
                               ;;                                "~/Dropbox/Apps/Org/Kulcare.org"
                               )))
#+END_SRC
** Org tags

The default value is -77, which is weird for smaller width windows.
I'd rather have the tags align horizontally with the header. 45 is a
good column number to do that.

#+begin_src emacs-lisp
(setq org-tags-column 45)
#+end_src

** Org babel languages

#+begin_src emacs-lisp :tangle no
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)
   (calc . t)
   (latex . t)
   (java . t)
   (ruby . t)
   (lisp . t)
   (scheme . t)
   (shell . t)
   (sqlite . t)
   (js . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for these languages."
  (not (or (string= lang "C")
           (string= lang "java")
           (string= lang "python")
           (string= lang "emacs-lisp")
           (string= lang "sqlite"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src

** Org babel/source blocks

I like to have source blocks properly syntax highlighted and with the
editing popup window staying within the same window so all the windows
don't jump around. Also, having the top and bottom trailing lines in
the block is a waste of space, so we can remove them.

I noticed that fontification doesn't work with markdown mode when the
block is indented after editing it in the org src buffer---the leading
#s for headers don't get fontified properly because they appear as Org
comments. Setting ~org-src-preserve-indentation~ makes things
consistent as it doesn't pad source blocks with leading spaces.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+end_src

** Org templates

Source block templates

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp" ))
(add-to-list 'org-structure-template-alist '("rb" . "src ruby" ))
(add-to-list 'org-structure-template-alist '("sh" . "src sh" ))
( add-to-list 'org-structure-template-alist '("md" . "src markdown"))
#+END_SRC

** Org exporting

*** Pandoc exporter

Pandoc converts between a huge number of different file formats.

#+begin_src emacs-lisp
;; (use-package ox-pandoc
;;   :no-require t
;;   :defer 10
;;   :ensure t)
#+end_src
*** LaTeX exporting

I've had issues with getting BiBTeX to work correctly with the LaTeX exporter for PDF exporting. By changing the command to `latexmk` references appear in the PDF output like they should. Source: http://tex.stackexchange.com/a/161619.

#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process (list "latexmk -pdf %f"))
#+END_SRC




* Window

Convenient keybindings to resize windows.

#+begin_src emacs-lisp
;; (bind-key "s-C-<left>"  'shrink-window-horizontally)
;; (bind-key "s-C-<right>" 'enlarge-window-horizontally)
;; (bind-key "s-C-<down>"  'shrink-window)
;; (bind-key "s-C-<up>"    'enlarge-window)
#+end_src

Whenever I split windows, I usually do so and also switch to the other
window as well, so might as well rebind the splitting key bindings to
do just that to reduce the repetition.

#+begin_src emacs-lisp
(defun vsplit-other-window ()
  "Splits the window vertically and switches to that window."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil))
(defun hsplit-other-window ()
  "Splits the window horizontally and switches to that window."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil))

(bind-key "C-x 2" 'vsplit-other-window)
(bind-key "C-x 3" 'hsplit-other-window)
#+end_src

** Winner mode

Winner mode allows you to undo/redo changes to window changes in Emacs
and allows you.

#+begin_src emacs-lisp
(use-package winner
  :config
  (winner-mode t)
  :bind (("M-s-<left>" . winner-undo)
         ("M-s-<right>" . winner-redo)))
#+end_src

** Winum mode
#+BEGIN_SRC emacs-lisp
(use-package winum
  :ensure t
  :config
  (setq winum-keymap
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "C-`") 'winum-select-window-by-number)
          (define-key map (kbd "C-²") 'winum-select-window-by-number)
          (define-key map (kbd "M-0") 'winum-select-window-0-or-10)
          (define-key map (kbd "M-1") 'winum-select-window-1)
          (define-key map (kbd "M-2") 'winum-select-window-2)
          (define-key map (kbd "M-3") 'winum-select-window-3)
          (define-key map (kbd "M-4") 'winum-select-window-4)
          (define-key map (kbd "M-5") 'winum-select-window-5)
          (define-key map (kbd "M-6") 'winum-select-window-6)
          (define-key map (kbd "M-7") 'winum-select-window-7)
          (define-key map (kbd "M-8") 'winum-select-window-8)
          map))

  (require 'winum)

  (defun winum-assign-9-to-calculator-8-to-flycheck-errors ()
    (cond
     ((equal (buffer-name) "*Calculator*") 9)
     ((equal (buffer-name) "*Flycheck errors*") 8)))

  (defun winum-assign-0-to-neotree-and ()
    (when (string-match-p (buffer-name) ".*\\*NeoTree\\*.*") 10))

  (add-to-list 'winum-assign-functions #'winum-assign-9-to-calculator-8-to-flycheck-errors)
  ;; (add-to-list 'winum-assign-functions #'winum-assign-0-to-neotree)

  (set-face-attribute 'winum-face nil :weight 'bold)

  (setq window-numbering-scope            'global
        winum-reverse-frame-list          nil
        winum-auto-assign-0-to-minibuffer t
        winum-assign-func                 'my-winum-assign-func
        ;; winum-auto-setup-mode-line        t
        ;; winum-mode-line-position          1
        winum-ignored-buffers             '(" *which-key*"))

  (winum-mode)
  )
#+END_SRC
** Transpose frame

#+begin_src emacs-lisp
(use-package transpose-frame
  :ensure t
  :bind ("H-t" . transpose-frame))
#+end_src

* Whitespace mode
# TODO: Add whitespace cleanup config
#+begin_src emacs-lisp
(use-package whitespace
  :ensure nil
  :diminish
  :hook ((prog-mode outline-mode conf-mode) . whitespace-mode)
  :bind (("s-<f10>" . whitespace-mode)
         ("C-c w" . whitespace-cleanup))
  :config
  (setq whitespace-line-column fill-column) ;; limit line length
  ;; automatically clean up bad whitespace
  (setq whitespace-action '(auto-cleanup))
  ;; only show bad whitespace
  (setq whitespace-style '(face
                           trailing space-before-tab
                           indentation empty space-after-tab)))

#+end_src

* ELPA packages

These are the packages that are not built into Emacs.

** Ag

#+BEGIN_SRC emacs-lisp
(use-package ag
  :commands ag
  :defer t
  :ensure t)
#+END_SRC

** Ace Jump Mode

A quick way to jump around text in buffers.

[[http://emacsrocks.com/e10.html][See Emacs Rocks Episode 10 for a screencast.]]

#+begin_src emacs-lisp
(use-package ace-jump-mode
  :ensure t
  :diminish ace-jump-mode
  :commands ace-jump-mode
  :bind ("C-S-s" . ace-jump-mode))
#+end_src

** Ace Window

[[https://github.com/abo-abo/ace-window][ace-window]] is a package that uses the same idea from ace-jump-mode for
buffer navigation, but applies it to windows. The default keys are
1-9, but it's faster to access the keys on the home row, so that's
what I have them set to (with respect to Dvorak, of course).

#+begin_src emacs-lisp
(use-package ace-window
  :ensure t
  :defer t
  :config
  (setq aw-keys '(?a ?o ?e ?u ?h ?t ?n ?s))
  (ace-window-display-mode)
  :bind ("s-o" . ace-window))
#+end_src
#+end_src

** Aggressive Indent
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :ensure t
  :config
  :defer t
  ;; (add-hook 'prog-mode-hook #'aggressive-indent-mode)
  )
#+END_SRC

** Browse URL
#+begin_src emacs-lisp
;; Pass a URL to a WWW browser
(use-package browse-url
  :ensure nil
  :defer t
  :defines dired-mode-map
  :bind (("C-c C-z ." . browse-url-at-point)
         ("C-c C-z b" . browse-url-of-buffer)
         ("C-c C-z r" . browse-url-of-region)
         ("C-c C-z u" . browse-url)
         ("C-c C-z v" . browse-url-of-file))
  :init
  (with-eval-after-load 'dired
    (bind-key "C-c C-z f" #'browse-url-of-file dired-mode-map)))

;; Click to browse URL or to send to e-mail address
(use-package goto-addr
  :ensure nil
  :hook ((text-mode . goto-address-mode)
         (prog-mode . goto-address-prog-mode)))


#+end_src

** Company completion
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :defines (company-dabbrev-ignore-case company-dabbrev-downcase)
  :commands company-abort
  :bind (("M-/" . company-complete)
         ("<backtab>" . company-yasnippet)
         :map company-active-map
         ("C-p" . company-select-previous)
         ("C-n" . company-select-next)
         ("<tab>" . company-complete-common-or-cycle)
         ("<backtab>" . my-company-yasnippet)
         ;; ("C-c C-y" . my-company-yasnippet)
         :map company-search-map
         ("C-p" . company-select-previous)
         ("C-n" . company-select-next))
  :hook (after-init . global-company-mode)
  :init
  (defun my-company-yasnippet ()
    (interactive)
    (company-abort)
    (call-interactively 'company-yasnippet))
  :config
  (setq company-tooltip-align-annotations t ; aligns annotation to the right
        company-tooltip-limit 12            ; bigger popup window
        company-idle-delay .2               ; decrease delay before autocompletion popup shows
        company-echo-delay 0                ; remove annoying blinking
        company-minimum-prefix-length 2
        company-require-match nil
        company-dabbrev-ignore-case nil
        company-dabbrev-downcase nil)

  ;; Icons and quickhelp
  (when emacs/>=26p
    (use-package company-box
      :diminish
      :hook (company-mode . company-box-mode)
      :init (setq company-box-icons-alist 'company-box-icons-all-the-icons)
      :config
      (setq company-box-backends-colors nil)
      (setq company-box-show-single-candidate t)
      (setq company-box-max-candidates 50)
      (set-face-attribute 'company-box-candidate nil :inherit 'info :height 120)

      (defun company-box-icons--elisp (candidate)
        (when (derived-mode-p 'emacs-lisp-mode)
          (let ((sym (intern candidate)))
            (cond ((fboundp sym) 'Function)
                  ((featurep sym) 'Module)
                  ((facep sym) 'Color)
                  ((boundp sym) 'Variable)
                  ((symbolp sym) 'Text)
                  (t . nil)))))

      (with-eval-after-load 'all-the-icons
        (declare-function all-the-icons-faicon 'all-the-icons)
        (declare-function all-the-icons-material 'all-the-icons)
        (setq company-box-icons-all-the-icons
              `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.8 :v-adjust -0.15))
                (Text . ,(all-the-icons-material "text_fields" :height 0.8 :v-adjust -0.15))
                (Method . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
                (Function . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
                (Constructor . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
                (Field . ,(all-the-icons-material "straighten" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-blue))
                (Variable . ,(all-the-icons-material "straighten" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-blue))
                (Class . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
                (Interface . ,(all-the-icons-material "share" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-blue))
                (Module . ,(all-the-icons-material "view_module" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-blue))
                (Property . ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.05))
                (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.8 :v-adjust -0.15))
                (Value . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-blue))
                (Enum . ,(all-the-icons-material "storage" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
                (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.8 :v-adjust -0.15))
                (Snippet . ,(all-the-icons-material "format_align_center" :height 0.8 :v-adjust -0.15))
                (Color . ,(all-the-icons-material "palette" :height 0.8 :v-adjust -0.15))
                (File . ,(all-the-icons-faicon "file-o" :height 0.8 :v-adjust -0.05))
                (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.8 :v-adjust -0.15))
                (Folder . ,(all-the-icons-faicon "folder-open" :height 0.8 :v-adjust -0.05))
                (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-blueb))
                (Constant . ,(all-the-icons-faicon "square-o" :height 0.8 :v-adjust -0.05))
                (Struct . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
                (Event . ,(all-the-icons-faicon "bolt" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-orange))
                (Operator . ,(all-the-icons-material "control_point" :height 0.8 :v-adjust -0.15))
                (TypeParameter . ,(all-the-icons-faicon "arrows" :height 0.8 :v-adjust -0.05))
                (Template . ,(all-the-icons-material "format_align_center" :height 0.8 :v-adjust -0.15)))))
      ))

  ;; Popup documentation for completion candidates
  (when (and (not emacs/>=26p) (display-graphic-p))
    (use-package company-quickhelp
      :defines company-quickhelp-delay
      :bind (:map company-active-map
                  ("M-h" . company-quickhelp-manual-begin))
      :hook (global-company-mode . company-quickhelp-mode)
      :init (setq company-quickhelp-delay 0.8))))



;; (use-package company
;;   :ensure t
;;   :diminish
;;   :config
;;   (add-hook 'after-init-hook 'global-company-mode)

;;   (setq company-idle-delay t)

;;   (use-package company-quickhelp
;;     :after (company)
;;     :ensure t
;;     :config
;;     (company-quickhelp-mode))

;;   (use-package company-go
;;     :ensure t
;;     :config
;;     (add-to-list 'company-backends 'company-go))

;;   (use-package company-anaconda
;;     :ensure t
;;     :config
;;     (add-to-list 'company-backends 'company-anaconda)))

;; (setq company-dabbrev-downcase nil)
#+END_SRC

** Crux

Collection of Ridiculously Useful eXtensions

#+BEGIN_SRC emacs-lisp
(use-package crux
  :ensure t
  :bind (("C-c o o" . crux-open-with)
         ("C-c o u" . crux-view-url)
         ("C-a" . crux-move-beginning-of-line)
         ("C-x r" . crux-recentf-find-file)))
#+END_SRC
** Dash

Integration with [[http://kapeli.com/dash][Dash, the API documentation browser on macOS]]. The
binding ~s-D~ is the same as Cmd-Shift-D, the same binding that dash
uses in Android Studio (trying to keep things consistent with the
tools I use).

#+begin_src emacs-lisp
(use-package dash-at-point
  :ensure t
  :defer t
  :bind (("s-D"     . dash-at-point)
         ("C-c e"   . dash-at-point-with-docset)))
#+end_src

** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-items '((recents  . 5)
                          (projects . 5)
                          (bookmarks . 5)
                          (agenda . 5)
                          (registers . 5))))
#+END_SRC
** Emmet

According to [[http://emmet.io/][their website]], "Emmet — the essential toolkit for web-developers."

#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :defer t
  :commands emmet-mode
  :config
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode))
#+end_src

** Evil NC Commenter
#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
  :ensure t)

;; Emacs key bindings
(global-set-key (kbd "M-;") 'evilnc-comment-or-uncomment-lines)
;; (global-set-key (kbd "C-c l") 'evilnc-quick-comment-or-uncomment-to-the-line)
;; (global-set-key (kbd "C-c c") 'evilnc-copy-and-comment-lines)
;; (global-set-key (kbd "C-c p") 'evilnc-comment-or-uncomment-paragraphs)

#+END_SRC

** Expand Region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+END_SRC
** Flycheck

Still need to set up hooks so that flycheck automatically runs in
python mode, etc. js2-mode is already really good for the syntax
checks, so I probably don't need the jshint checks with flycheck for
it.

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer 10
  :bind (("C-c n" . 'flycheck-next-error)
         ;; ("C-c p" . 'flycheck-previous-error)
         )
  :config
  (add-hook 'after-init-hook 'global-flycheck-mode)
  (setq flycheck-html-tidy-executable "tidy5")
  ;;(add-hook 'flycheck-mode-hook 'shan/use-eslint-from-node-modules)
  (setq-default flycheck-disabled-checkers '(ruby-reek ruby-rubylint))
  (add-hook 'ruby-mode-hook
            (lambda ()
              (flycheck-disable-checker 'ruby-reek)))
  )

(use-package flycheck-posframe
  :ensure t
  :after flycheck
  :init
  :config (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode)
  (set-face-attribute 'flycheck-posframe-error-face nil :inherit 'error :height 120)
  (set-face-attribute 'flycheck-posframe-warning-face nil :inherit 'warning :height 120)
  (set-face-attribute 'flycheck-posframe-info-face nil :inherit 'info :height 120)
  )
#+end_src
** Highlight Indent Guides
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :ensure t
  :defer t
  :init
  (setq highlight-indent-guides-method 'character)
  ;; (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  )

#+END_SRC

** HL TODO
#+begin_src emacs-lisp
(use-package hl-todo
  :defer t
  :custom-face (hl-todo ((t (:box t :inherit))))
  :bind (:map hl-todo-mode-map
              ([C-f3] . hl-todo-occur)
              ("C-c t p" . hl-todo-previous)
              ("C-c t n" . hl-todo-next)
              ("C-c t o" . hl-todo-occur))
  :hook (after-init . global-hl-todo-mode))
#+end_src

** Highlight Symbols
#+begin_src emacs-lisp
;; Highlight symbols
(use-package symbol-overlay
  :defer t
  :diminish
  :defines iedit-mode
  :commands (symbol-overlay-get-symbol
             symbol-overlay-assoc
             symbol-overlay-get-list
             symbol-overlay-jump-call)
  :bind (("M-i" . symbol-overlay-put)
         ("M-n" . symbol-overlay-jump-next)
         ("M-p" . symbol-overlay-jump-prev)
         ("M-N" . symbol-overlay-switch-forward)
         ("M-P" . symbol-overlay-switch-backward)
         ("M-C" . symbol-overlay-remove-all)
         ([M-f3] . symbol-overlay-remove-all))
  :hook (
         ;; (prog-mode . symbol-overlay-mode)
         (iedit-mode . (lambda () (symbol-overlay-mode -1)))
         (iedit-mode-end . symbol-overlay-mode)))

#+end_src
** Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :bind ("C-c g" . magit-status)
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))

;; (use-package forge
;;   :after magit
;;   :defer t)

(use-package git-gutter
  :ensure t
  :config
  (global-git-gutter-mode 't)
  :diminish git-gutter-mode)

(use-package git-timemachine
  :ensure t)

;; (use-package git-modes
;;   :ensure t
;;   :defer t)

(use-package git-link
  :ensure t
  :defer t)

(use-package git-messenger
  :ensure t
  :defer t
  :bind ("C-x v p" . 'git-messenger:popup-message))
#+end_src

*** Fullscreen magit

#+BEGIN_QUOTE
The following code makes magit-status run alone in the frame, and then
restores the old window configuration when you quit out of magit.

No more juggling windows after commiting. It's magit bliss.
#+END_QUOTE
[[http://whattheemacsd.com/setup-magit.el-01.html][Source: Magnar Sveen]]

#+begin_src emacs-lisp
;; full screen magit-status
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))
#+end_src

** Neotree
#+BEGIN_SRC emacs-lisp
;; sidebar and dired in one
(use-package neotree
  :defer t
  :bind
  ("<f8>" . neotree-toggle)
  :config
  ;; needs package all-the-icons
  (setq neo-window-position 'left)
  (setq neo-theme (if (display-graphic-p) 'ascii 'arrow))

  ;; Disable line-numbers minor mode for neotree
  (add-hook 'neo-after-create-hook
            (lambda (&rest _) (display-line-numbers-mode -1)))

  ;; Every time when the neotree window is opened, let it find current
  ;; file and jump to node.
  (setq neo-smart-open t)

  ;; track ‘projectile-switch-project’ (C-c p p),
  (setq projectile-switch-project-action 'neotree-projectile-action))
#+END_SRC
** Keychords
#+BEGIN_SRC emacs-lisp
(use-package use-package-chords
  :ensure t
  :config
  (key-chord-mode 1))

(defun shan/switch-to-previous-buffer ()
  "Switch to previously open buffer.
  Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

(key-chord-define-global "JJ" 'shan/switch-to-previous-buffer)
#+END_SRC

** Markdown mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :defer t
  :ensure t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode)))
#+end_src

** Multiple cursors

We'll also need to ~(require 'multiple-cusors)~ because of [[https://github.com/magnars/multiple-cursors.el/issues/105][an autoload issue]].

#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :defer t
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->"         . mc/mark-next-like-this)
         ("C-<"         . mc/mark-previous-like-this)
         ("C-c C-<"     . mc/mark-all-like-this)
         ("C-!"         . mc/mark-next-symbol-like-this)
         ("s-d"         . mc/mark-all-dwim)))
#+end_src

** Projectile

#+BEGIN_QUOTE
Project navigation and management library for Emacs.
#+END_QUOTE
http://projectile.mx

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :commands (projectile-mode projectile-switch-project)
  :init
  (setq projectile-completion-system 'ivy)
  (setq projectile-indexing-method 'alien)
  (setq projectile-enable-caching t)
  (global-set-key (kbd "C-c p p") 'projectile-switch-project)
  (setq projectile-switch-project-action #'projectile-find-dir)
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))

#+end_src


** Rainbow mode + delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :delight
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package rainbow-mode
  :ensure t
  :delight
  :hook (prog-mode . rainbow-mode)
  :config
  (setq rainbow-x-colors nil))

#+END_SRC

** Smoothscrolling

This makes it so ~C-n~-ing and ~C-p~-ing won't make the buffer jump
around so much.

#+begin_src emacs-lisp
(use-package smooth-scrolling
  :ensure t)
#+end_src

** Webmode

#+begin_src emacs-lisp :tangle no
(use-package web-mode
  :ensure t
  :defer t
  :mode ("\\.html\\'")
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-engines-alist
        '(("django" . "focus/.*\\.html\\'")
          ("ctemplate" . "realtimecrm/.*\\.html\\'"))))

(setq-default   web-mode-markup-indent-offset 2
                web-mode-css-indent-offset 2
                web-mode-code-indent-offset 2
                web-mode-attr-indent-offset 2
                )
#+end_src

** Yasnippet

Yeah, snippets! I start with snippets from [[https://github.com/AndreaCrotti/yasnippet-snippets][Andrea Crotti's collection]]
and have also modified them and added my own.

#+begin_src emacs-lisp :tangle no
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :defert t
  :config
  (setq yas-snippet-dirs (concat user-emacs-directory "snippets"))
  (setq yas-indent-line 'fixed)
  (yas-global-mode)
  (global-set-key (kbd "M-/") 'company-yasnippet))
#+end_src

** Scratch

Convenient package to create =*scratch*= buffers that are based on the
current buffer's major mode. This is more convienent than manually
creating a buffer to do some scratch work or reusing the initial
=*scratch*= buffer.

#+begin_src emacs-lisp
(use-package scratch
  :ensure t
  :commands scratch)

(use-package persistent-scratch
  :ensure t
  :init
  (persistent-scratch-setup-default))
#+end_src

** Transparency
#+begin_src emacs-lisp
(use-package seethru
:ensure t
:defert t
:config
(seethru 90)
(seethru-recommended-keybinds)
)
#+end_src emacs-lisp
** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :diminish smartparens-mode
  :config
  (add-hook 'prog-mode-hook 'smartparens-mode))
#+END_SRC

** Super Save
#+BEGIN_SRC emacs-lisp
(use-package super-save
  :ensure t
  :defer t
  :config
  ;; (super-save-mode +1)
  )
#+END_SRC
** Undo Tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :delight
  :init
  (global-undo-tree-mode))
#+END_SRC
** Which Key
# TODO: Needs configuration
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :config
  (add-hook 'after-init-hook 'which-key-mode))

#+END_SRC
* Computer-specific settings

Load some computer-specific settings, such as the name and and email
address. The way the settings are loaded is based off of [[https://github.com/magnars/.emacs.d][Magnar
Sveen's]] config.

In my case, the computers I use usually use the same username (my
name, go figure), so instead of basing the specific settings from the
username, I use the hostname. The shell command ~hostname -s~ gets the
hostname for the computer without any "domain information," such as
the ".local" suffix.

#+begin_src emacs-lisp
;; (require 'subr-x) ;; #'string-trim
;; (defvar mai/user-settings-dir nil
;;   "The directory with user-specific Emacs settings for this
;;   user.")

;; ;; Settings for currently logged in user
;; (setq shan/user-settings-dir
;;       (concat user-emacs-directory
;;               "users/"
;;               (string-trim (shell-command-to-string "hostname -s"))))
;; (add-to-list 'load-path mai/user-settings-dir)

;; ;; Load settings specific for the current user
;; (when (file-exists-p mai/user-settings-dir)
;;   (mapc 'load (directory-files mai/user-settings-dir nil "^[^#].*el$")))
#+end_src

* Languages
** Language Servers
#+BEGIN_SRC emacs-lisp
;; (use-package eglot
;;   :hook (prog-mode . eglot-ensure)
;;   :config (add-to-list 'eglot-server-programs '(ruby-mode . ("solargraph" "socket"))
;;                        ))
#+END_SRC
** C/Java

I don't like the default way that Emacs handles indentation. For instance,

#+begin_src C
int main(int argc, char *argv[])
{
  /* What's with the brace alignment? */
  if (check)
  {
  }
  return 0;
}
#+end_src

#+begin_src java
switch (number)
{
  case 1:
    doStuff();
    break;
  case 2:
    doStuff();
    break;
  default:
    break;
}
#+end_src

Luckily, I can modify the way Emacs formats code with this configuration.

#+begin_src emacs-lisp
(defun my-c-mode-hook ()
  (setq c-basic-offset 2)
  (c-set-offset 'substatement-open 0)   ; Curly braces alignment
  (c-set-offset 'case-label 2))         ; Switch case statements alignment

(add-hook 'c-mode-hook 'my-c-mode-hook)
(add-hook 'java-mode-hook 'my-c-mode-hook)

#+end_src

** Javascript
#+BEGIN_SRC emacs-lisp
(setq-default js-indent-level 2)

(use-package js2-mode
  :ensure t
  :mode "\\.js\\'"
  :config
  (setq-default js2-ignored-warnings '("msg.extra.trailing.comma")))

(use-package prettier-js
  :ensure t
  :config
  (setq prettier-js-args '(
                           "--trailing-comma" "es5"
                           "--single-quote" "false"
                           "--print-width" "100"
                           ))
  (add-hook 'js2-mode-hook 'prettier-js-mode))

(defun shan/use-eslint-from-node-modules ()
  "Set local eslint if available."
  (let* ((root (locate-dominating-file
                (or (buffer-file-name) default-directory)
                "node_modules"))
         (eslint (and root
                      (expand-file-name "node_modules/eslint/bin/eslint.js"
                                        root))))
    (when (and eslint (file-executable-p eslint))
      (setq-local flycheck-javascript-eslint-executable eslint))))

(defun shan/switch-to-previous-buffer ()
  "Switch to previously open buffer.
  Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

(key-chord-define-global "JJ" 'shan/switch-to-previous-buffer)

;; json-mode: Major mode for editing JSON files with emacs
;; https://github.com/joshwnj/json-mode
(use-package json-mode
  :mode "\\.js\\(?:on\\|[hl]int\\(rc\\)?\\)\\'"
  :config
  (add-hook 'json-mode-hook #'prettier-js-mode)
  (setq json-reformat:indent-width 2)
  (setq json-reformat:pretty-string? t)
  (setq js-indent-level 2))

#+END_SRC
** JSON
Install json-mode and make its reformat keybinding match the global default.

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :commands json-mode
  :config
  (bind-keys :map json-mode-map
             ("C-c <tab>" . json-mode-beautify)))

#+END_SRC
** Ruby
#+BEGIN_SRC emacs-lisp
(use-package ruby-mode
  :ensure t
  :mode "\\.rb\\'"
  :mode "Rakefile\\'"
  :mode "Gemfile\\'"
  :mode "Capfile\\'"
  :mode "Guardfile\\'"
  :mode "Berksfile\\'"
  :mode "Vagrantfile\\'"
  :interpreter "ruby"

  :init
  (setq ruby-indent-level 2
        ruby-indent-tabs-mode nil)
  (add-hook 'ruby-mode 'subword-mode)
  ;; (add-hook 'ruby-mode 'lsp-mode)

  :bind
  (([(meta down)] . ruby-forward-sexp)
   ([(meta up)]   . ruby-backward-sexp)
   ("C-c C-e"     . ruby-send-region)))  ;; Rebind since Rubocop uses C-c C-r

;; Rbenv
(use-package rbenv
  :ensure t
  :defer t
  :init (setq rbenv-show-active-ruby-in-modeline nil)
  :config (progn
            (global-rbenv-mode)
            (add-hook 'ruby-mode-hook 'rbenv-use-corresponding)))


;; Rubocop
(use-package rubocop
  :ensure t
  :defer t
  :init
  (add-hook 'ruby-mode-hook 'rubocop-mode)
  :diminish cop)

;; InfRuby to change ruby
(use-package inf-ruby
  :ensure t
  :init
  (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode))

;; Robe
(use-package robe
  :ensure t
  :bind ("C-M-." . robe-jump)
  :hook (ruby-mode . robe-mode)
  :config
  (defadvice inf-ruby-console-auto
      (before activate-rbenv-for-robe activate)
    (rbenv-use-corresponding))
  )

;; in buffer interpreter
(use-package seeing-is-believing
  :ensure t
  :delight
  :hook (ruby-mode . seeing-is-believing)
  :config
  (setq seeing-is-believing-max-length 150
        seeing-is-believing-max-results 10
        seeing-is-believing-timeout 10.5
        seeing-is-believing-alignment 'file))

;; Rufo Code formatter
;; (use-package rufo
;;   :ensure t
;;   :defer t
;;   :init
;;   (add-hook 'ruby-mode-hook 'rufo-minor-mode))

;; Ruby Tools
(use-package ruby-tools
  :ensure t
  :delight
  :defer t
  :init
  (add-hook 'ruby-mode-hook 'ruby-tools-mode))

;; RSpec
(use-package rspec-mode
  :ensure t
  :init
  (setq rspec-use-rake-when-possible nil)
  (setq rspec-spec-command "rspec")
  (setq rspec-use-spring-when-possible nil)
  (add-hook 'ruby-mode-hook 'rspec-mode)

  :config
  (defadvice rspec-compile (around rspec-compile-around)

    "Use BASH shell for running the specs because of ZSH issues."
    (let ((shell-file-name "/bin/bash"))
      ad-do-it))

  ;; (bind-keys :map rspec-mode-map
  ;;            ;; ("<return>" . reindent-phen-newline-and-indent)
  ;;            ("M-p ;" . rspec-poggle-spec-and-parget)
  ;;            ("M-p d" . rspec-disable-example)
  ;;            ("M-p e" . rspec-enable-example)
  ;;            ("M-p t" . rspec-verify-single)
  ;;            ("M-p l" . rspec-rerun)
  ;;            ("M-p f" . rspec-verify)
  ;;            ("M-p a" . rspec-verify-all))
  (ad-activate 'rspec-compile))

;; Ruby Refactor

(use-package ruby-refactor
  :ensure t
  :defer t
  :init
  (add-hook 'ruby-mode-hook 'ruby-refactor-mode-launch))

;; YAML
(use-package yaml-mode
  :ensure t
  :mode ("\\.ya?ml\\'" . yaml-mode))

#+END_SRC
* Misc

** Non-ELPA packages

Some packages aren't in ELPA, so they're stored in the [[file:site-lisp][site-lisp]]
directory and loaded here.

*** Titlecase

As in the titlecase package instructions, the titlecase command needs to be in the $PATH for this to work.

#+BEGIN_SRC emacs-lisp
(use-package titlecase
  :load-path "~/.emacs.d/site-lisp")
#+END_SRC

*** HideShow Vis
#+BEGIN_SRC emacs-lisp

(use-package hideshowvis
  :load-path "~/.emacs.d/github/hideshowvis"
  :config
  (add-hook 'prog-mode-hook 'hideshowvis-enable)
  (hideshowvis-symbols)
  )
#+END_SRC
** Display Time

When displaying the time with =display-time-mode=, I don't care about
the load average.

#+begin_src emacs-lisp
(setq display-time-default-load-average nil)
#+end_src

** Display Battery Mode

See the documentation for =battery-mode-line-format= for the format
characters.

#+begin_src emacs-lisp
(setq battery-mode-line-format "[%b%p%% %t]")
#+end_src

** Docview keybindings

Convenience bindings to use doc-view with the arrow keys.

#+begin_src emacs-lisp
(use-package doc-view
  :commands doc-view-mode
  :config
  (define-key doc-view-mode-map (kbd "<right>") 'doc-view-next-page)
  (define-key doc-view-mode-map (kbd "<left>") 'doc-view-previous-page))
#+end_src

** OS X scrolling

#+begin_src emacs-lisp
(setq mouse-wheel-scroll-amount (quote (0.01)))
#+end_src
